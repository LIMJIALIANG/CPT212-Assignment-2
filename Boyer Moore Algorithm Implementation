def bad_character_heuristic(pattern):
    """
    Creates the bad character heuristic table.
    :param pattern: The pattern for which the bad character heuristic is built.
    :return: A list representing the bad character heuristic.
    """
    bad_char = [-1] * 256 # Initialize all occurrences as -1 (ASCII table size)


    # Update the list with the last occurrence of each character in the pattern
    for i in range(len(pattern)):
        bad_char[ord(pattern[i])] = i # ord() gives the ASCII value of the character
       
    return bad_char


def suffix_processing(shift, border_pos, pattern, m):
    """
    Processes the pattern to create the good suffix heuristic tables.
    :param shift: The shift table to be populated.
    :param border_pos: The border position table to be populated.
    :param pattern: The pattern for which the tables are built.
    :param m: The length of the pattern.
    """
    i = m
    j = m + 1
    border_pos[i] = j # Initialize the last border position


    while i > 0:
        # Process the pattern from right to left
        while j <= m and pattern[i - 1] != pattern[j - 1]:
            # If characters mismatch, update the shift table
            if shift[j] == 0:
                shift[j] = j - i
            j = border_pos[j] # Update j to the next border position
        i -= 1
        j -= 1
        border_pos[i] = j # Update the border position for the current i


def prefix_processing(shift, border_pos, pattern, m):
    """
    Finalizes the good suffix heuristic table by processing prefixes.
    :param shift: The shift table to be populated.
    :param border_pos: The border position table to be used.
    :param pattern: The pattern for which the tables are built.
    :param m: The length of the pattern.
    """
    j = border_pos[0] # Start with the border position of the whole pattern
    for i in range(m + 1):
        if shift[i] == 0:
            shift[i] = j # If shift is not set, use the border position
        if i == j:
            j = border_pos[j] # Update j to the next border position


def visualize_alignment(text, pattern, s, j):
    """
    Visualizes the alignment of the pattern with the text at position s.
    :param text: The text being searched.
    :param pattern: The pattern being searched for.
    :param s: The current shift position.
    :param j: The current mismatch position.
    """
    print("Text   :", text)
    print("Pattern: " + " " * s + pattern)
    print("         " + " " * (s + j) + "^")
    print()


def boyer_moore_search(text, pattern):
    """
    Boyer-Moore search algorithm combining bad character and good suffix heuristics.
    :param text: The text in which to search for the pattern.
    :param pattern: The pattern to search for.
    :return: A list of starting indices where the pattern is found in the text.
    """
    n = len(text) # Length of the text
    m = len(pattern) # Length of the pattern


    # Generate the bad character heuristic table
    bad_char = bad_character_heuristic(pattern)
   
    # Initialize the shift and border position arrays
    shift = [0] * (m + 1)
    border_pos = [0] * (m + 1)


    # Process suffixes and prefixes for good suffix heuristic
    suffix_processing(shift, border_pos, pattern, m)
    prefix_processing(shift, border_pos, pattern, m)


    s = 0 # Shift of the pattern with respect to text
    result = [] # List to store the result indices


    # Main loop to slide the pattern over text
    while s <= n - m:
        j = m - 1 # Start comparison from the end of the pattern


        # Move from right to left in the pattern
        while j >= 0 and pattern[j] == text[s + j]:
            j -= 1 # Decrease j while characters of pattern and text match


        if j < 0: # Pattern found
            visualize_alignment(text, pattern, s, 0)
            print(f"Pattern found at index {s}")


            # Calculate shifts based on heuristics
            bad_char_shift = (m - bad_char[ord(text[s + m])] if s + m < n else 1)
            # If the bad character shift goes beyond the text, use shift 1
            good_suffix_shift = shift[0] # Use the good suffix shift
            max_shift = max(bad_char_shift, good_suffix_shift) # Take the maximum of both shifts


            # If searching of the pattern has reached the end of the text, then stop
            if (s + m >= n):
                print()
            else:
                print(f"Bad character rule suggests shift by {bad_char_shift}")
                print(f"Good suffix rule suggests shift by {good_suffix_shift}")
                print(f"Shift pattern to index {max_shift}")


            result.append(s) # Append the current shift position to the result list
            s += max_shift # Shift the pattern by the calculated maximum shift value
            print()
        else: # Mismatch found
            visualize_alignment(text, pattern, s, j)


            # Calculate the bad character shift
            bad_char_shift = max(1, j - bad_char[ord(text[s + j])])
            # Get the good suffix shift
            good_suffix_shift = shift[j + 1]
            # Determine the maximum shift
            max_shift = max(bad_char_shift, good_suffix_shift)


            print(f"Mismatch at text index {s + j}, pattern index {j}")
            print(f"Bad character rule suggests shift by {bad_char_shift}")
            print(f"Good suffix rule suggests shift by {good_suffix_shift}")
            print(f"Shift pattern to index {max_shift}")


            # Apply the calculated shift
            s += max_shift
            print()


    return result


# Get input from user
text = input("Enter the text: ")
pattern = input("Enter the pattern: ")


# Perform the Boyer-Moore search
result = boyer_moore_search(text, pattern)


# Print the result
print("Pattern found at indices:", result)
